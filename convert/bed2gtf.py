#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2016  Yao Li
# Convert bed file to gtf file, provide special support for bed files downloads from UCSC HgTables
#
# How to use:
# $ python bed2gtf.py -i bedFiles -o gtfFile -s refGene_hg38 -f 3UTR -u 1 -m map

import getopt, sys, os.path

idNameMap = {}

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hi:o:s:f:u:m:", ["help", "input=","output=","source=", "feature=", "ucsc=", "map="])
    except getopt.GetoptError as err:
        print(err) 
        help()
        sys.exit(2)
    infile = None; outfile = None; s = '.'; f = '.'; u = 0;

    for o, a in opts:
        if o in ("-h","--help"):
            help()
            sys.exit()
        elif o in ("-i", "--input"):
            if os.path.isfile(a):
                infile = a
        elif o in ("-o", "--output"):
            outfile = a
        elif o in ("-s", "--source"):
            s = a
        elif o in ("-f", "--feature"):
            f = a
        elif o in ("-u", "--ucsc"):
            u = 1
        elif o in ("-m", "--map"):
            m = a
        else:
            assert False, "Unhandled option"

    if infile is not None and outfile is not None:
        convert(infile, outfile, s, f, u, m)
    else:
        help()


def help():
    print "help: python bed2gtf [options] <mandatory>"
    print "Options:"
    print "\t-h, --help:\n\t\t show this help message and exit"
    print "Mandatory:"
    print "\t-i, --input:\n\t\t File with the regions in bed format"
    print "\t-o, --output:\n\t\t Name of the gtf file output file. Directory where the file will be created should exist!"
    print "\t-s, --source:\n\t\t Name of the program that generated this feature, or the data source"
    print "\t-f, --feature:\n\t\t feature type name, e.g. Gene, Variation, Similarity"
    print "\t-u, --ucsc:\n\t\t If the bed file to be converted was generated by ucsc hgtables, enter -u 1"
    print "\t-m, --map:\n\t\t If you entered '-u 1', you should provide a file which a map between transcript id and gene symbol"

def map(mapFile, transcriptID):
    if len(idNameMap) == 0:
        try:
            m = open(mapFile, 'r')
            for line in m:
                l = line.split()
                idNameMap[l[0]] = l[1]
        except:
            print "error to load the map"
            return ''
    return idNameMap[transcriptID]

def attrGenerator(mapFile, name):
    ele = name.split('_')
    transcriptID = ele[0]+'_'+ele[1]
    category = ele[2]
    if category != 'intron':
        result = 'gene_id "'+map(mapFile, transcriptID)+'"; transcript_id "'+transcriptID+'"; exon_number "'+ele[3]+'"; exon_id "'+transcriptID+'.'+ele[3]+'";'
    else:
        result = 'gene_id "'+map(mapFile, transcriptID)+'"; transcript_id "'+transcriptID+'";'
    
    return result

def convert(infile, outfile, source='.', feature='.', ucsc=0, mapFile=None):

    inf  = open(infile, 'r')
    outf = open(outfile,'w')

    cont = 1
    for line in inf:
        cols = line.split()
        if ucsc == 0:
            outf.write(cols[0]+"\t"+source+"\t"+feature+"\t"+cols[1]+"\t"+cols[2]+"\t"+cols[4]+"\t"+cols[5]+"\t.\t"+'name "'+cols[3]+'";'+"\n")
        else:
            outf.write(cols[0]+"\t"+source+"\t"+feature+"\t"+cols[1]+"\t"+cols[2]+"\t"+cols[4]+"\t"+cols[5]+"\t.\t"+attrGenerator(mapFile, cols[3])+"\n")
        cont += 1

    inf.close()
    outf.close()

if __name__ == "__main__":
    main()
